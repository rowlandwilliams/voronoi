{"version":3,"sources":["components/Voronoi.js","App.js","index.js"],"names":["Voronoi","width","window","innerWidth","height","innerHeight","colorSchemes","interpolateRainbow","interpolatePlasma","interpolateTurbo","interpolateCool","interpolateInferno","interpolateYlOrRd","interpolateCividis","pointSeed","Math","floor","random","generateRandomPoints","nPoints","minX","maxX","minY","maxY","d3","map","i","pickColor","colorGlobal","length","useState","points","useEffect","plot","generateVoronoi","voronoi","extent","initialPolygons","polygons","svg","attr","defs","append","drawVoronoi","undefined","subPolygons","drawSubPolygons","parent","clipArea","level","isSub","localColor","insert","d","selectAll","data","enter","brighter","polyToPath","parentPols","parentLevel","each","box","this","getBBox","pointsNew","x","y","polygons2","parentNode","outline","pathId","addClipPath","polygon","join","className","class","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAuLeA,MAzKf,WAEE,IAAIC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAGdC,EAAe,CACnBC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAKEC,EAAYC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAGhD,SAASC,EAAqBC,EAASC,EAAMC,EAAMC,EAAMC,GACvD,OAAOC,IAAS,EAAGL,GAASM,KAAI,SAAUC,GACxC,MAAO,CACLX,KAAKC,MAAMD,KAAKE,UAAYI,EAAOD,IAASA,EAC5CL,KAAKC,MAAMD,KAAKE,UAAYM,EAAOD,IAASA,MAKlD,IAAIK,EAAYZ,KAAKE,SAAW,GAC5BW,EACFtB,EAAaS,KAAKC,MAAMD,KAAKE,SAAWX,EAAauB,SAEvD,EAA4BC,mBAC1BZ,EAAqBJ,EAAW,EAAGZ,OAAOC,WAAY,EAAGD,OAAOG,cADlE,mBAAO0B,EAAP,UAKAC,qBAAU,WACRC,EAAKN,KACJ,CAACI,IAGJ,IAAIG,EAAkBC,cAAUC,OAAO,CACrC,CAAC,EAAG,GACJ,CAACnC,EAAOG,KAGNiC,EAAkBH,EAAgBH,GAAQO,WAExCL,EAAO,SAACN,GACZ,IAAIY,EAAMf,IAAU,UAAUgB,KAAK,QAAS,QAAQA,KAAK,SAAU,QAG/DC,EAAOjB,IAAU,UAAUkB,OAAO,QAEtCC,EAAYJ,EAAKF,OAAiBO,EAAW,EAAGjB,GAChD,IAAIkB,EAAcC,EAAgBP,EAAKF,EAAiB,EAAGI,EAAMd,GACjEkB,EAAcC,EAAgBP,EAAKM,EAAa,EAAGJ,EAAMd,IAI3D,SAASgB,EAAYI,EAAQT,EAAUU,EAAUC,EAAOtB,EAAWuB,GACjE,GAAIvB,EACF,IAAIwB,EACF7C,EAAaS,KAAKC,MAAMD,KAAKE,SAAWX,EAAauB,SAGzDkB,EACGK,OAAO,IAAK,gBACZZ,KAAK,aAAa,SAAUa,GAC3B,OAAOL,EAAW,QAAUA,EAAW,IAAM,MAE9CR,KAAK,QAAS,YACdc,UAAU,QACVC,KAAKjB,GACLkB,QACAJ,OAAO,QACPZ,KAAK,aAAcS,GACnBT,KAAK,gBAAgB,WACpB,OAAO,GAAmB,GAAbS,EAAQ,OAEtBT,KAAK,UAAU,WACdhB,IAAO,QAAQiC,SAASR,MAEzBT,KAAK,QAAQ,WACZ,OAAiB,IAAVS,EACH,GACAtB,EACAwB,EAAWpC,KAAKE,UAChBW,EAAYb,KAAKE,aAEtBuB,KAAK,eAAgB,OACrBA,KAAK,IAAKkB,GAcf,SAASZ,EAAgBC,EAAQY,EAAYV,EAAOR,EAAMd,GACxD,IAAIiC,EAAcX,EAAQ,EAGVzB,IAAa,oBAAsBoC,EAAc,MAGvDC,MAAK,SAAUR,EAAG3B,GAE1B,IAAIoC,EAAMC,KAAKC,UAGXC,EAAY/C,EACdJ,EAAYmC,EACZa,EAAII,EACJJ,EAAII,EAAIJ,EAAI7D,MACZ6D,EAAIK,EACJL,EAAIK,EAAIL,EAAI1D,QAUVgE,EANWjC,cAAUC,OAAO,CAC9B,CAAC0B,EAAII,EAAGJ,EAAIK,GACZ,CAACL,EAAII,EAAIJ,EAAI7D,MAAO6D,EAAIK,EAAIL,EAAI1D,UAITkC,SAAS2B,GAGlCtB,EACEnB,IAAUuC,KAAKM,YACfD,EACA,MAAQR,EAAc,IAAMlC,EAC5BuB,EACAtB,GAON,SAAqB2C,EAASC,EAAQ9B,GACpCA,EACGC,OAAO,YACPF,KAAK,KAAM+B,GACX7B,OAAO,QACPF,KAAK,IAAKkB,EAAWY,IATtBE,CAAYnB,EAAG,MAAQO,EAAc,IAAMlC,EAAGe,MAYlD,SAASiB,EAAWe,GAClB,OAAOA,EAAU,IAAMA,EAAQC,KAAK,KAAO,IAAM,KAGnD,OACE,qBAAKC,UAAU,aAAf,SACE,qBAAKC,MAAM,aCvKFC,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,cAAC,EAAD,OCFNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3544cbe9.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport voronoi from \"d3-voronoi/src/voronoi\";\nimport {\n  interpolateRainbow,\n  interpolatePlasma,\n  interpolateTurbo,\n  interpolateCool,\n  interpolateInferno,\n  interpolateYlOrRd,\n  interpolateCividis,\n} from \"d3\";\nimport \"./styles.css\";\n\nfunction Voronoi() {\n  //set width for initial point plot\n  var width = window.innerWidth;\n  var height = window.innerHeight;\n\n  // randomly pick color scheme\n  const colorSchemes = [\n    interpolateRainbow,\n    interpolatePlasma,\n    interpolateTurbo,\n    interpolateCool,\n    interpolateInferno,\n    interpolateYlOrRd,\n    interpolateCividis,\n  ];\n\n  // number of initial polygons\n  // var pointSeed = 10;\n  var pointSeed = Math.floor(Math.random() * 8) + 5;\n\n  // generate points for a given g size\n  function generateRandomPoints(nPoints, minX, maxX, minY, maxY) {\n    return d3.range(0, nPoints).map(function (i) {\n      return [\n        Math.floor(Math.random() * (maxX - minX)) + minX,\n        Math.floor(Math.random() * (maxY - minY)) + minY,\n      ];\n    });\n  }\n\n  var pickColor = Math.random() < 0.5;\n  var colorGlobal =\n    colorSchemes[Math.floor(Math.random() * colorSchemes.length)];\n\n  const [points, setPoints] = useState(\n    generateRandomPoints(pointSeed, 0, window.innerWidth, 0, window.innerHeight)\n  );\n\n  // plot on load\n  useEffect(() => {\n    plot(pickColor);\n  }, [points]);\n\n  // initial voronoi function\n  var generateVoronoi = voronoi().extent([\n    [0, 0],\n    [width, height],\n  ]);\n\n  var initialPolygons = generateVoronoi(points).polygons();\n\n  const plot = (pickColor) => {\n    var svg = d3.select(\".chart\").attr(\"width\", \"100%\").attr(\"height\", \"100%\");\n\n    // append defs here and pass down\n    var defs = d3.select(\".chart\").append(\"defs\");\n\n    drawVoronoi(svg, initialPolygons, undefined, 0, pickColor);\n    var subPolygons = drawSubPolygons(svg, initialPolygons, 1, defs, pickColor);\n    subPolygons = drawSubPolygons(svg, subPolygons, 2, defs, pickColor);\n    // drawVoronoi(svg, subPolygons, undefined, 3);\n  };\n\n  function drawVoronoi(parent, polygons, clipArea, level, pickColor, isSub) {\n    if (pickColor) {\n      var localColor =\n        colorSchemes[Math.floor(Math.random() * colorSchemes.length)];\n    }\n\n    parent\n      .insert(\"g\", \":first-child\")\n      .attr(\"clip-path\", function (d) {\n        return clipArea ? \"url(#\" + clipArea + \")\" : \"\";\n      })\n      .attr(\"class\", \"polygons\")\n      .selectAll(\"path\")\n      .data(polygons)\n      .enter()\n      .insert(\"path\")\n      .attr(\"data-level\", level)\n      .attr(\"stroke-width\", function () {\n        return 6 / ((level + 1) * 2);\n      })\n      .attr(\"stroke\", function () {\n        d3.hsl(\"#000\").brighter(level);\n      })\n      .attr(\"fill\", function () {\n        return level === 0\n          ? \"\"\n          : pickColor\n          ? localColor(Math.random())\n          : colorGlobal(Math.random());\n      })\n      .attr(\"fill-opacity\", \"0.3\")\n      .attr(\"d\", polyToPath);\n    // .on(\"mousemove\", (event) => moved(event));\n  }\n\n  function moved(event) {\n    var pointsNew = [...points];\n    pointsNew[0] = d3.pointer(event);\n    initialPolygons = generateVoronoi(pointsNew).polygons();\n\n    setPoints(pointsNew);\n    // initialPolygons = generateVoronoi(points).polygons();\n    // polyToPath();\n  }\n\n  function drawSubPolygons(parent, parentPols, level, defs, pickColor) {\n    var parentLevel = level - 1;\n\n    // find all parent polygons using parent level\n    var selection = d3.selectAll('path[data-level=\"' + parentLevel + '\"]');\n\n    // iterate across each parent polygon\n    selection.each(function (d, i) {\n      // determine the bounding box\n      var box = this.getBBox();\n\n      // gernerate new points for the bounding box of each polygon\n      var pointsNew = generateRandomPoints(\n        pointSeed * level,\n        box.x,\n        box.x + box.width,\n        box.y,\n        box.y + box.height\n      );\n\n      // set extent of new voronoi based on bounding coords\n      var voronoi2 = voronoi().extent([\n        [box.x, box.y],\n        [box.x + box.width, box.y + box.height],\n      ]);\n\n      //define new coords\n      var polygons2 = voronoi2.polygons(pointsNew);\n      var isSub = true;\n      // draw new Voronoi and clip based on parent clip path id\n      drawVoronoi(\n        d3.select(this.parentNode),\n        polygons2,\n        \"cp-\" + parentLevel + \"-\" + i,\n        level,\n        pickColor,\n        isSub\n      );\n      addClipPath(d, \"cp-\" + parentLevel + \"-\" + i, defs);\n    });\n  }\n\n  function addClipPath(outline, pathId, defs) {\n    defs\n      .append(\"clipPath\")\n      .attr(\"id\", pathId)\n      .append(\"path\")\n      .attr(\"d\", polyToPath(outline));\n  }\n\n  function polyToPath(polygon) {\n    return polygon ? \"M\" + polygon.join(\"L\") + \"Z\" : null;\n  }\n\n  return (\n    <div className=\"chart-wrap\">\n      <svg class=\"chart\"></svg>\n    </div>\n  );\n}\n\nexport default Voronoi;\n\n// function redraw() {\n//   var diagram = generateVoronoi(sites);\n//   polygon = polygon.data(diagram.polygons()).call(redrawPolygon);\n// }\n","import \"./App.css\";\nimport Voronoi from \"./components/Voronoi\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Voronoi />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}